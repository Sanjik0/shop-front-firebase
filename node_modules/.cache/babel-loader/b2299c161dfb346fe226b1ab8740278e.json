{"remainingRequest":"/home/sanzhar/Public/Projects/Vue Projects/shop-firebase/node_modules/babel-loader/lib/index.js!/home/sanzhar/Public/Projects/Vue Projects/shop-firebase/src/store/category.js","dependencies":[{"path":"/home/sanzhar/Public/Projects/Vue Projects/shop-firebase/src/store/category.js","mtime":1589404050016},{"path":"/home/sanzhar/Public/Projects/Vue Projects/shop-firebase/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/sanzhar/Public/Projects/Vue Projects/shop-firebase/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/sanzhar/Public/Projects/Vue Projects/shop-firebase/src/store/category.js"],"names":["firebase","actions","fetchCategories","commit","dispatch","uid","database","ref","once","val","categories","Object","keys","map","key","id","updateCategory","title","limit","child","update","category","createCategory","push","fetchCategoryById"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app'\n\nexport default {\n    actions: {\n        async fetchCategories({commit, dispatch}) {\n            try {\n                const uid = await dispatch('getUid')\n                const categories = (await firebase.database().ref(`/users/${uid}/categories`).once('value')).val() || {} \n                return Object.keys(categories).map(key => ({...categories[key], id: key}))\n            } catch(e) {\n                commit('setError', e)\n                throw e\n            }\n        },\n        async updateCategory({commit, dispatch}, {title, limit, id}) {\n            try {\n                const uid = await dispatch('getUid')\n                const category = await firebase.database().ref(`/users/${uid}/categories`).child(id).update({title, limit})\n            } catch(e) {\n                commit('setError', e)\n                throw e\n            }\n        },\n        async createCategory({commit, dispatch}, {title, limit}) {\n            try {\n                const uid = await dispatch('getUid')\n                const category = await firebase.database().ref(`/users/${uid}/categories`).push({title, limit})\n                return {title, limit, id: category.key}\n            } catch(e) {\n                commit('setError', e)\n                throw e\n            }\n        },\n        async fetchCategoryById({commit, dispatch}, id) {\n            try {\n                const uid = await dispatch('getUid')\n                const category = (await firebase.database().ref(`/users/${uid}/categories`).child(id).once('value')).val() || {} \n                return {...category, id}\n            } catch(e) {\n                commit('setError', e)\n                throw e\n            }\n        },\n    }\n}\n"]}]}